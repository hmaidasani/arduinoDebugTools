extends layout

block content
	h1(class='title')= title
	#leftPanel
		.graph
			h2(class='graph-title') Analog Inputs
			.container
				#placeholder1.placeholder(style='padding: 0px; position: relative;')
		.graph
			h2(class='graph-title') Analog Outputs
			.container
				#placeholder2.placeholder(style='padding: 0px; position: relative;')
		.graph
			h2(class='graph-title') Digital Inputs
			.container
				#placeholder3.placeholder(style='padding: 0px; position: relative;')
		.graph
			h2(class='graph-title') Digital Outputs
			.container
				#placeholder4.placeholder(style='padding: 0px; position: relative;')
	#rightPanel
		.rawData
			h2 Raw Data
			ul
	script(src='/bower_components/jquery/jquery.min.js')
	script(src='/bower_components/flot/jquery.flot.js')
	script(src='/socket.io/socket.io.js')
	script(type='text/javascript').
		var maximum = 10;

		var options = {
			grid: {
				
				margin: {
					top: 8,
					bottom: 20,
					//- left: 20
				},
			},
			lines: {
				show: true
			},
			points: {
				show: false
			},
			xaxis: {
				tickFormatter: function() {
					return "";
				}
			},
		};
	
		var seriesAInMap = {}, seriesAOutMap = {}, seriesDInMap = {}, seriesDOutMap = {};
		var seriesAIn = [], seriesAOut = [], seriesDIn = [], seriesDOut = [];

		function plotData(data) {
			seriesAIn = [], seriesAOut = [], seriesDIn = [], seriesDOut = [];
			for(var key in data) {
				// analog in
				if(key.charAt(0) == 'a' && key.charAt(key.length-1) === 'i') {
					if(seriesAInMap[key]) {
						if(seriesAInMap[key].length == maximum)
							seriesAInMap[key] = seriesAInMap[key].slice(1);
						seriesAInMap[key].push(data[key]);
					} else {
						seriesAInMap[key] = [data[key]];
					}
				} 
				// analog out
				if(key.charAt(0) == 'a' && key.charAt(key.length-1) === 'o') {
					if(seriesAOutMap[key]) {
						if(seriesAOutMap[key].length == maximum)
							seriesAOutMap[key] = seriesAOutMap[key].slice(1);
						seriesAOutMap[key].push(data[key]);
					} else {
						seriesAOutMap[key] = [data[key]];
					}
				} 
				// digital in
				if(key.charAt(0) == 'd' && key.charAt(key.length-1) === 'i') {
					if(seriesDInMap[key]) {
						if(seriesDInMap[key].length == maximum)
							seriesDInMap[key] = seriesDInMap[key].slice(1);
						seriesDInMap[key].push(data[key]);
					} else {
						seriesDInMap[key] = [data[key]];
					}
				} 
				// digital out
				if(key.charAt(0) == 'd' && key.charAt(key.length-1) === 'o') {
					if(seriesDOutMap[key]) {
						if(seriesDOutMap[key].length == maximum)
							seriesDOutMap[key] = seriesDOutMap[key].slice(1);
						seriesDOutMap[key].push(data[key]);
					} else {
						seriesDOutMap[key] = [data[key]];
					}
				} 
			}

			// zip the y values with x values
			for(var key in seriesAInMap) {
				var res = [];
				for (var i = 0; i < seriesAInMap[key].length; ++i) {
					res.push([i, seriesAInMap[key][i]]);
				}
				seriesAIn.push(
					{
						"label": key,
						"data": res
					});
			}
			for(var key in seriesAOutMap) {
				var res = [];
				for (var i = 0; i < seriesAOutMap[key].length; ++i) {
					res.push([i, seriesAOutMap[key][i]]);
				}
				seriesAOut.push(
					{
						"label": key,
						"data": res
					});
			}
			for(var key in seriesDInMap) {
				var res = [];
				for (var i = 0; i < seriesDInMap[key].length; ++i) {
					res.push([i, seriesDInMap[key][i]]);
				}
				seriesDIn.push(
					{
						"label": key,
						"data": res
					});
			}
			for(var key in seriesDOutMap) {
				var res = [];
				for (var i = 0; i < seriesDOutMap[key].length; ++i) {
					res.push([i, seriesDOutMap[key][i]]);
				}
				seriesDOut.push(
					{
						"label": key,
						"data": res
					});
			}

			$.plot("#placeholder1", seriesAIn, options);
			$.plot("#placeholder2", seriesAOut, options);
			$.plot("#placeholder3", seriesDIn, options);
			$.plot("#placeholder4", seriesDOut, options);
		}

		var socket = io.connect('http://localhost');
		socket.on('data', function (data) {
			plotData(data[0]);
			for(var i = 1; i<=4; i++) {
				var container = $("#placeholder"+i);
				var yaxisLabel = $("<div class='axisLabel yaxisLabel'></div>")
					.text("")
					.appendTo(container);
				yaxisLabel.css("margin-top", yaxisLabel.width() / 2 - 20);
			}
			if($('.rawData ul li').size() === maximum)
				$('.rawData ul li').first().remove();
			$('.rawData ul').append("<li>"+data[1]+"</li>");
		});


