extends layout

block content
	h1(class='title')= title
	h2(class='graph-title') Analog Inputs
	.container
		#placeholder1.placeholder(style='padding: 0px; position: relative;')
	h2(class='graph-title') Analog Outputs
	.container
		#placeholder2.placeholder(style='padding: 0px; position: relative;')
	h2(class='graph-title') Digital Inputs
	.container
		#placeholder3.placeholder(style='padding: 0px; position: relative;')
	h2(class='graph-title') Digital Outputs
	.container
		#placeholder4.placeholder(style='padding: 0px; position: relative;')
	script(src='/bower_components/jquery/jquery.min.js')
	script(src='/bower_components/flot/jquery.flot.js')
	script(src='/socket.io/socket.io.js')
	script(type='text/javascript').
		var container = $("#placeholder");
		// Determine how many data points to keep based on the placeholder's initial size;
		// this gives us a nice high-res plot while avoiding more than one point per pixel.

		var maximum = 30;
		var a0i = [], a1i = [], a2i = [], a3i = [], a4i = [], a5i = [];
		var a0o = [], a1o = [], a2o = [], a3o = [], a4o = [], a5o = [];
		var d0i = [], d1i = [], d2i = [], d3i = [], d4i = [], d5i = [],
			d6i = [], d7i = [], d8i = [], d9i = [], d10i = [], 
			d11i = [], d12i = [], d13i = [];
		var d0o = [], d1o = [], d2o = [], d3o = [], d4i = [], d5i = [],
			d6i = [], d7i = [], d8i = [], d9i = [], d10i = [], 
			d11i = [], d12i = [], d13i = [];

		var options = {
			lines: {
				show: true
			},
			points: {
				show: false
			},
			xaxis: {
				tickDecimals: 0,
				tickSize: 1
			}
		};

		$(function() {
			//- var data = {
			//- 	"label": "Europe (EU27)",
			//- 	"data": [[1, 3.0], [2, 3.9], [3, 2.0], [4, 1.2], [5, 1.3], [6, 2.5], [7, 2.0], [8, 3.1], [9, 2.9], [10, 0.9]]
			//- };
			
			//- var data2 = {
			//- 	"label": "Japan",
			//- 	"data": [[1, -0.1], [2, 2.9], [3, 0.2], [4, 0.3], [5, 1.4], [6, 2.7], [7, 1.9], [8, 2.0], [9, 2.3], [10, -0.7]]
			//- };
			//- $.plot("#placeholder1", [data, data2], options);
		});


		var seriesAInMap = {}, seriesAOutMap = {}, seriesDInMap = {}, seriesDOutMap = {};
		var seriesAIn = [], seriesAOut = [], seriesDIn = [], seriesDOut = [];

		function plotData(data) {
			seriesAIn = [], seriesAOut = [], seriesDIn = [], seriesDOut = [];
			for(var key in data) {
				// analog in
				if(key.charAt(0) == 'a' && key.charAt(key.length-1) === 'i') {
					if(seriesAInMap[key]) {
						if(seriesAInMap[key].length == maximum)
							seriesAInMap[key] = seriesAInMap[key].slice(1);
						seriesAInMap[key].push(data[key]);
					} else {
						seriesAInMap[key] = [data[key]];
					}
				} 
				// analog out
				if(key.charAt(0) == 'a' && key.charAt(key.length-1) === 'o') {
					if(seriesAOutMap[key]) {
						if(seriesAOutMap[key].length == maximum)
							seriesAOutMap[key] = seriesAOutMap[key].slice(1);
						seriesAOutMap[key].push(data[key]);
					} else {
						seriesAOutMap[key] = [data[key]];
					}
				} 
				// digital in
				if(key.charAt(0) == 'd' && key.charAt(key.length-1) === 'i') {
					if(seriesDInMap[key]) {
						if(seriesDInMap[key].length == maximum)
							seriesDInMap[key] = seriesDInMap[key].slice(1);
						seriesDInMap[key].push(data[key]);
					} else {
						seriesDInMap[key] = [data[key]];
					}
				} 
				// digital out
				if(key.charAt(0) == 'd' && key.charAt(key.length-1) === 'o') {
					if(seriesDOutMap[key]) {
						if(seriesDOutMap[key].length == maximum)
							seriesDOutMap[key] = seriesDOutMap[key].slice(1);
						seriesDOutMap[key].push(data[key]);
					} else {
						seriesDOutMap[key] = [data[key]];
					}
				} 
			}

			// zip the y values with x values
			for(var key in seriesAInMap) {
				var res = [];
				for (var i = 0; i < seriesAInMap[key].length; ++i) {
					res.push([i, seriesAInMap[key][i]]);
				}
				seriesAIn.push(
					{
						"label": key,
						"data": res
					});
			}
			for(var key in seriesAOutMap) {
				var res = [];
				for (var i = 0; i < seriesAOutMap[key].length; ++i) {
					res.push([i, seriesAOutMap[key][i]]);
				}
				seriesAOut.push(
					{
						"label": key,
						"data": res
					});
			}
			for(var key in seriesDInMap) {
				var res = [];
				for (var i = 0; i < seriesDInMap[key].length; ++i) {
					res.push([i, seriesDInMap[key][i]]);
				}
				seriesDIn.push(
					{
						"label": key,
						"data": res
					});
			}
			for(var key in seriesDOutMap) {
				var res = [];
				for (var i = 0; i < seriesDOutMap[key].length; ++i) {
					res.push([i, seriesDOutMap[key][i]]);
				}
				seriesDOut.push(
					{
						"label": key,
						"data": res
					});
			}

			$.plot("#placeholder1", seriesAIn, options);
			$.plot("#placeholder2", seriesAOut, options);
			$.plot("#placeholder3", seriesDIn, options);
			$.plot("#placeholder4", seriesDOut, options);
		}

		

		var socket = io.connect('http://localhost');
		socket.on('data', function (data) {
			plotData(data);
			//- socket.emit('my other event', { my: 'data' });
		});


